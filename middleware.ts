import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";
import { getToken } from "next-auth/jwt";

export async function middleware(request: NextRequest) {
  const pathname = request.nextUrl.pathname;

  // ‡∏î‡∏∂‡∏á Token ‡∏î‡πâ‡∏ß‡∏¢ getToken
  const token = await getToken({ req: request, secret: process.env.NEXTAUTH_SECRET });

  // üîπ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á API `/api/activities` ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  if (pathname.startsWith("/api/activities")) {
    return NextResponse.next();
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  const protectedRoutes = [
    "/admin/dashboard",
    "/admin/banner",
    "/admin/e-service",
    "/admin/news/news-update",
    "/admin/news/activities",
    "/admin/agency/personnel",
    "/admin/users",
    "/admin/setting"
  ];

  if (protectedRoutes.some(route => pathname.startsWith(route))) {
    const role = token?.role as string;
    const userRestrictedRoutes = [
      "/admin/agency/personnel",
      "/admin/users",
      "/admin/e-service",
      "/admin/banner",
    ];
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Token ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login
    if (!token) {
      return NextResponse.redirect(new URL("/auth/secure/gateway/login", request.url));
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Role: ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ SUPERUSER ‡πÅ‡∏•‡∏∞ USER
    const allowedRoles = ["SUPERUSER", "USER"];
    if (!allowedRoles.includes(role)) {
      return NextResponse.redirect(new URL("/auth/secure/gateway/login", request.url));
    }

    if (role === "USER" && userRestrictedRoutes.some(route => pathname.startsWith(route))) {
      return NextResponse.redirect(new URL("/admin/dashboard", request.url));
    }
  }

  // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API ‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô `/api/auth/*` ‡πÅ‡∏•‡∏∞ `/api/activities`)
  if (pathname.startsWith("/api") &&
    !pathname.startsWith("/api/auth") &&
    !pathname.startsWith("/api/uploads") &&
    !pathname.startsWith("/api/activities") &&
    !pathname.startsWith("/api/news") &&
    !pathname.startsWith("/api/agency/personnel") &&
    !pathname.startsWith("/api/eservice") &&
    !pathname.startsWith("/api/banner/image") &&
    !pathname.startsWith("/api/banner/video")) {
    if (!token) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }
  }

  return NextResponse.next();
}

// Matcher ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤ Middleware ‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏î
export const config = {
  matcher: ["/admin/:path*", "/auth/secure/gateway/login", "/api/:path*"],
};
